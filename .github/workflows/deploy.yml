name: CD Pipeline
on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  pull_request:
    types:
      - closed
    branches: [ "main", "dev" ]
  workflow_dispatch:
    # Входные значения для ручного запуска

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout репозиторий
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Установка SSH
      - name: Install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      # 3. Логинимся в GHCR
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # 4. Копируем docker compose с новыми env variables
      - name: Create docker compose config
        run: |
          cat compose.yml | envsubst > compose-secret.yml

      # 5. Отправляем на удаленный хост
      - name: Copy docker compose config
        run: scp compose-secret.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:compose.yml

      # 6. На удаленном хосте стягиваем последние изменения
      - name: Connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker login ghcr.io -u ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} && docker compose pull && docker compose up -d && exit"

      # 7. Удаляем чувствительные данные
      - name: Cleanup config
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "rm compose.yml"

      # 8. Удаляем SSH-ключи
      - name: Cleanup keys
        run: rm -rf ~/.ssh compose-secret.yml
