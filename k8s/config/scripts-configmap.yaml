# k8s/config/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-scripts
  namespace: litres
data:
  init-db.sh: |
    #!/bin/bash

    /opt/mssql/bin/sqlservr &

    # Ожидание запуска SQL Server
    sleep 30s

    # Выполнение скрипта создания базы данных
    /opt/mssql-tools18/bin/sqlcmd -S ${DB_SERVER} -U ${SA_USER} -P ${SA_PASSWORD} -v HANGFIRE_PASSWORD=${HANGFIRE_PASSWORD} -i /usr/src/app/create-databases.sql

    # Оставляем контейнер активным
    while true; do sleep 1d; done
  create-databases.sql: |
    USE master;
    GO

    -- Create the litres database if it doesn't exist
    IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = N'litres')
    BEGIN
        CREATE DATABASE litres;
        PRINT 'Database "litres" has been created.';
    END
    ELSE
    BEGIN
        PRINT 'Database "litres" already exists.';
    END
    GO

    USE litres;
    GO

    -- Create the HangFire login without specifying a password
    IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = N'HangFire')
    BEGIN
        CREATE LOGIN HangFire WITH PASSWORD = '$(HANGFIRE_PASSWORD)';
        PRINT 'Login for HangFire user has been created.';
    END
    ELSE
    BEGIN
        PRINT 'Login for HangFire user already exists.';
    END
    GO

    -- Create the HangFire user for the HangFire login if it doesn't exist
    IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = N'HangFire')
    BEGIN
        CREATE USER [HangFire] FOR LOGIN HangFire;
        PRINT 'HangFire user has been created.';
    END
    ELSE
    BEGIN
        PRINT 'HangFire user already exists.';
    END
    GO

    -- Create the HangFire schema if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM sys.schemas WHERE [name] = 'HangFire')
    BEGIN
        EXEC ('CREATE SCHEMA [HangFire]');
        PRINT 'Schema "HangFire" has been created.';
    END
    ELSE
    BEGIN
        PRINT 'Schema "HangFire" already exists.';
    END
    GO

    -- Set the owner of the HangFire schema to the HangFire user
    ALTER AUTHORIZATION ON SCHEMA::[HangFire] TO [HangFire];
    PRINT 'Ownership of schema "HangFire" has been assigned to user "HangFire".';
    GO

    -- Grant table creation privileges to the HangFire user
    GRANT CREATE TABLE TO [HangFire];
    PRINT 'Table creation privileges have been granted to user "HangFire".';
    GO
  wait-for-db.sh: |
    #!/bin/bash

    set -e

    # Проверка существования пользователя HangFire
    while true; do
        result=$(/opt/mssql-tools18/bin/sqlcmd -S ${DB_SERVER} -U ${SA_USER} -P ${SA_PASSWORD} -d ${DB_NAME} -Q "SELECT COUNT(name) FROM sys.database_principals WHERE name = 'HangFire'" -h -1 -W)
        count=$(echo $result | grep -oE '^[0-9]+')

        if [[ -n "$count" && "$count" -eq 1 ]]; then
            >&2 echo "Permission was granted - checking for migrations..."
            break
        else
            >&2 echo "SQL Server is up, but permissions weren't granted yet. Retrying..."
            sleep 5
        fi
    done

    # Проверка накладывания миграций через наличие таблицы 'Roles'
    while true; do
        result=$(/opt/mssql-tools18/bin/sqlcmd -S ${DB_SERVER} -U ${SA_USER} -P ${SA_PASSWORD} -d ${DB_NAME} -Q "IF OBJECT_ID('dbo.Roles', 'U') IS NOT NULL SELECT 1 ELSE SELECT 0" -h -1 -W)
        count=$(echo $result | grep -oE '^[0-9]+')

        if [[ "$count" -eq 1 ]]; then
            >&2 echo "Migrations have been applied - starting server..."
            break
        else
            >&2 echo "Migrations haven't been applied yet. Retrying..."
            sleep 5
        fi
    done

    # Выполнение команды, переданной в аргументах
    exec dotnet Litres.WebAPI.dll